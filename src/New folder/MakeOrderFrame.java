
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import javax.swing.DefaultCellEditor;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

public class MakeOrderFrame extends javax.swing.JFrame {

    /**
     * Creates new form MakeOrderFrame
     */
    public MakeOrderFrame() {
        initComponents();
        ShowProducts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jProductsOrderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMakeOrderButton = new javax.swing.JButton();
        jCustomerName = new javax.swing.JTextField();
        jCustomerPhone = new javax.swing.JTextField();
        jOrderTotalPrice = new javax.swing.JLabel();
        jBackToDashboardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(25, 25, 25));

        jProductsOrderTable.setAutoCreateRowSorter(true);
        jProductsOrderTable.setBackground(new java.awt.Color(25, 25, 25));
        jProductsOrderTable.setForeground(new java.awt.Color(255, 255, 255));
        jProductsOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Product Price", "Product Stock", "Product Description", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jProductsOrderTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jProductsOrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jProductsOrderTableMouseClicked(evt);
            }
        });
        jProductsOrderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jProductsOrderTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jProductsOrderTable);
        if (jProductsOrderTable.getColumnModel().getColumnCount() > 0) {
            jProductsOrderTable.getColumnModel().getColumn(0).setHeaderValue("Product ID");
            jProductsOrderTable.getColumnModel().getColumn(1).setHeaderValue("Product Name");
            jProductsOrderTable.getColumnModel().getColumn(2).setHeaderValue("Product Price");
            jProductsOrderTable.getColumnModel().getColumn(3).setHeaderValue("Product Stock");
            jProductsOrderTable.getColumnModel().getColumn(4).setHeaderValue("Product Description");
            jProductsOrderTable.getColumnModel().getColumn(5).setHeaderValue("Quantity");
        }

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Customer Name");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Customer Phone");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Order Total Price:");

        jMakeOrderButton.setBackground(new java.awt.Color(25, 25, 25));
        jMakeOrderButton.setForeground(new java.awt.Color(255, 255, 255));
        jMakeOrderButton.setText("Make Order");
        jMakeOrderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMakeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMakeOrderButtonActionPerformed(evt);
            }
        });

        jCustomerName.setBackground(new java.awt.Color(25, 25, 25));
        jCustomerName.setForeground(new java.awt.Color(255, 255, 255));

        jCustomerPhone.setBackground(new java.awt.Color(25, 25, 25));
        jCustomerPhone.setForeground(new java.awt.Color(255, 255, 255));

        jOrderTotalPrice.setForeground(new java.awt.Color(255, 255, 255));
        jOrderTotalPrice.setEnabled(false);

        jBackToDashboardButton.setBackground(new java.awt.Color(25, 25, 25));
        jBackToDashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        jBackToDashboardButton.setText("Back To Dashboard");
        jBackToDashboardButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackToDashboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCustomerName)
                    .addComponent(jCustomerPhone)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jOrderTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jBackToDashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jMakeOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jOrderTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jMakeOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBackToDashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private static class PositiveIntegerCellEditor extends DefaultCellEditor {

        private static final Border red = new LineBorder(Color.red);
        private static final Border black = new LineBorder(Color.black);
        private JTextField textField;

        //validation for quantity input
        public PositiveIntegerCellEditor(JTextField textField) {
            super(textField);
            this.textField = textField;
            this.textField.setHorizontalAlignment(JTextField.LEFT);
        }

        @Override
        public boolean stopCellEditing() {
            try {
                int v = Integer.valueOf(textField.getText());
                if (v < 0) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                textField.setBorder(red);
                return false;
            }
            return super.stopCellEditing();
        }

        @Override
        public Component getTableCellEditorComponent(JTable table,
                Object value, boolean isSelected, int row, int column) {
            textField.setBorder(black);
            return super.getTableCellEditorComponent(
                    table, value, isSelected, row, column);
        }
    }

    private void ShowProducts() {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ComputerStoreManagementSystem", "root", "root");
            PreparedStatement stmt = con.prepareStatement("select ProductID,ProductName,ProductPrice,ProductStock,ProductDescription from producttable;");
            ResultSet set = stmt.executeQuery();
            DefaultTableModel dm = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false except column 5
                    return column == 5;
                }
            };
            dm.addColumn("Product ID");
            dm.addColumn("Product Name");
            dm.addColumn("Product Price");
            dm.addColumn("Product Stock");
            dm.addColumn("Product Description");
            dm.addColumn("Quantity");
            while (set.next()) {
                String r[] = {set.getString(1), set.getString(2), set.getString(3), set.getString(4), set.getString(5), "0"};
                dm.addRow(r);
            }
            JTextField textBox = new JTextField();
            jProductsOrderTable.setModel(dm);
            jProductsOrderTable.getColumnModel().getColumn(5).setCellEditor(new PositiveIntegerCellEditor(textBox));
            jProductsOrderTable.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        CustomMethods.makeDark(jProductsOrderTable, jScrollPane1);
    }

    private void jMakeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMakeOrderButtonActionPerformed
        //check if quantity input is correct
        if (jProductsOrderTable.isEditing() && !jProductsOrderTable.getCellEditor().stopCellEditing()) {
            JOptionPane.showMessageDialog(this, "Quantity Must be Positive Integer");
        } else {
            int rows[] = jProductsOrderTable.getSelectedRows();
            String error = "";
            long totalQuantity = 0;
            double orderTotalPrice = 0;
            for (int i = 0; i < rows.length; i++) {
                if (Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 3).toString()) < Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 5).toString())) {
                    error += "Required Quantity of Product \"" + jProductsOrderTable.getValueAt(rows[i], 1) + "\" at row " + (rows[i] + 1) + " is more than the available stock\n";
                }
                if (Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 5).toString()) == 0) {
                    error += "Quantity of selected products must be more than zero change quantity at row " + (rows[i] + 1) + "\n";
                }
                orderTotalPrice += Double.parseDouble(jProductsOrderTable.getValueAt(rows[i], 2).toString()) * Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 5).toString());
                totalQuantity += Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 5).toString());
            }
            String customerName = jCustomerName.getText();
            String customerPhone = jCustomerPhone.getText();

            if (!error.isEmpty()) {
                JOptionPane.showMessageDialog(this, error);
            } else if (customerName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer Name can't be empty!!");
            } else if ((customerPhone.length() != 11 && customerPhone.length() != 8) || !customerPhone.chars().allMatch(Character::isDigit)) {
                JOptionPane.showMessageDialog(this, "Customer Phone isn't correct must be numeric and 8 or 11 digits only " + customerPhone.chars().allMatch(Character::isDigit));
            } else {
                jOrderTotalPrice.setText(orderTotalPrice + "");
                try {
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ComputerStoreManagementSystem", "root", "root");
                    String generatedColumns[] = {"OrderId"};
                    PreparedStatement stmt = con.prepareStatement("insert into ordertable(OrderDate,OrderTotalPrice,CustomerName,CustomerPhone) values(?,?,?,?)", generatedColumns);
                    DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    String strDate = df.format(new Date());
                    stmt.setString(1, strDate);
                    stmt.setString(2, orderTotalPrice + "");
                    stmt.setString(3, customerName);
                    stmt.setString(4, customerPhone);
                    stmt.executeUpdate();
                    ResultSet rs = stmt.getGeneratedKeys();
                    if (rs.next()) {
                        String OrderId = rs.getInt(1) + "";
                        PreparedStatement stmtOrderLine = con.prepareStatement("insert into orderproducttable(OrderID, ProductID, OrderProductQuantity, OrderProductName) values(?,?,?,?)");
                        stmt = con.prepareStatement("update producttable set ProductStock=? where ProductID=?");
                        for (int i = 0; i < rows.length; i++) {
                            int ProductStock = Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 3).toString()) - Integer.parseInt(jProductsOrderTable.getValueAt(rows[i], 5).toString());
                            String ProductId = jProductsOrderTable.getValueAt(rows[i], 0).toString();
                            stmt.setString(1, ProductStock + "");
                            stmt.setString(2, ProductId);
                            stmtOrderLine.setString(1, OrderId);
                            stmtOrderLine.setString(2, ProductId);
                            stmtOrderLine.setString(3, jProductsOrderTable.getValueAt(rows[i], 5).toString());
                            stmtOrderLine.setString(4, jProductsOrderTable.getValueAt(rows[i], 1).toString());
                            stmt.executeUpdate();
                            stmtOrderLine.executeUpdate();
                        }
                        JOptionPane.showMessageDialog(this, "Insertion Success");
                        jCustomerName.setText("");
                        jCustomerPhone.setText("");
                        jOrderTotalPrice.setText("");
                        ShowProducts();
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMakeOrderButtonActionPerformed

    private void jBackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackToDashboardButtonActionPerformed
        this.setVisible(false);
        DashboardFrame d = new DashboardFrame();
        d.setLocationRelativeTo(this);
        d.setVisible(true);
    }//GEN-LAST:event_jBackToDashboardButtonActionPerformed

    private void jProductsOrderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProductsOrderTableMouseClicked
        int rows[] = jProductsOrderTable.getSelectedRows();
        double orderTotalPrice = 0;

        for (int i = 0; i < rows.length; i++) {
            orderTotalPrice += Double.parseDouble(jProductsOrderTable.getValueAt(rows[i], 2).toString()) * Double.parseDouble(jProductsOrderTable.getValueAt(rows[i], 5).toString());
        }

        jOrderTotalPrice.setText(orderTotalPrice + "");
    }//GEN-LAST:event_jProductsOrderTableMouseClicked

    private void jProductsOrderTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jProductsOrderTableKeyReleased
        int rows[] = jProductsOrderTable.getSelectedRows();
        double orderTotalPrice = 0;

        for (int i = 0; i < rows.length; i++) {
            orderTotalPrice += Double.parseDouble(jProductsOrderTable.getValueAt(rows[i], 2).toString()) * Double.parseDouble(jProductsOrderTable.getValueAt(rows[i], 5).toString());
        }

        jOrderTotalPrice.setText(orderTotalPrice + "");
    }//GEN-LAST:event_jProductsOrderTableKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MakeOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MakeOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MakeOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MakeOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MakeOrderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBackToDashboardButton;
    private javax.swing.JTextField jCustomerName;
    private javax.swing.JTextField jCustomerPhone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jMakeOrderButton;
    private javax.swing.JLabel jOrderTotalPrice;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable jProductsOrderTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
