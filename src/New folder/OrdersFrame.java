
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

public class OrdersFrame extends javax.swing.JFrame {

    /**
     * Creates new form OrdersFrame
     */
    public OrdersFrame() {
        initComponents();
        ShowData();

        JSearchText.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        JSearchText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jOrdersTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        JSeachCombo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jOrderProductsTable = new javax.swing.JTable();
        jBackToDashboardButton = new javax.swing.JButton();
        jDeleteOrder = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(25, 25, 25));

        JSearchText.setBackground(new java.awt.Color(25, 25, 25));
        JSearchText.setForeground(new java.awt.Color(255, 255, 255));

        jOrdersTable.setAutoCreateRowSorter(true);
        jOrdersTable.setBackground(new java.awt.Color(25, 25, 25));
        jOrdersTable.setForeground(new java.awt.Color(255, 255, 255));
        jOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Order Date", "Order Total Price", "Customer Name", "Customer Phone"
            }
        ));
        jOrdersTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jOrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jOrdersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jOrdersTable);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search By: ");

        JSeachCombo.setBackground(new java.awt.Color(25, 25, 25));
        JSeachCombo.setForeground(new java.awt.Color(255, 255, 255));
        JSeachCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Customer Name", "Customer Phone", "Product Name" }));
        JSeachCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jOrderProductsTable.setAutoCreateRowSorter(true);
        jOrderProductsTable.setBackground(new java.awt.Color(25, 25, 25));
        jOrderProductsTable.setForeground(new java.awt.Color(255, 255, 255));
        jOrderProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Product Quantity"
            }
        ));
        jOrderProductsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(jOrderProductsTable);

        jBackToDashboardButton.setBackground(new java.awt.Color(25, 25, 25));
        jBackToDashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        jBackToDashboardButton.setText("Back To Dashboard");
        jBackToDashboardButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackToDashboardButtonActionPerformed(evt);
            }
        });

        jDeleteOrder.setBackground(new java.awt.Color(25, 25, 25));
        jDeleteOrder.setForeground(new java.awt.Color(255, 255, 255));
        jDeleteOrder.setText("Delete Order");
        jDeleteOrder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteOrderActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Search: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jBackToDashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDeleteOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JSeachCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JSeachCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBackToDashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDeleteOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jOrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jOrdersTableMouseClicked
        try {
            //set database connection
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/computerstoremanagementsystem", "root", "root");
            //prepare query
            PreparedStatement stmt = con.prepareStatement("select ProductID,OrderProductName,OrderProductQuantity from orderproducttable where OrderID = ?");
            int selectedRow = jOrdersTable.getSelectedRow();
            stmt.setString(1, (String) jOrdersTable.getValueAt(selectedRow, 0));
            //execute query and save data
            ResultSet set = stmt.executeQuery();
            DefaultTableModel dm = new DefaultTableModel() {
                @Override
                //make cells not editable
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };
            dm.addColumn("Product ID");
            dm.addColumn("Product Name");
            dm.addColumn("Product Quantity");

            while (set.next()) {
                String r[] = {set.getString(1), set.getString(2), set.getString(3)};
                dm.addRow(r);
            }
            jOrderProductsTable.setModel(dm);
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        CustomMethods.makeDark(jOrderProductsTable, jScrollPane2);
    }//GEN-LAST:event_jOrdersTableMouseClicked

    private void ShowData() {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ComputerStoreManagementSystem",
                    "root", "root");
            PreparedStatement stmt = con.prepareStatement(
                    "select OrderID , ProductID, OrderProductName, OrderProductQuantity from orderproducttable;");
            ResultSet set = stmt.executeQuery();
            DefaultTableModel dm = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    // all cells false
                    return false;
                }
            };
            dm.addColumn("Order Id");
            dm.addColumn("Product ID");
            dm.addColumn("Product Name");
            dm.addColumn("Quantity");
            while (set.next()) {
                String OrderId = set.getString(1);
                String ProductId = set.getString(2);
                String OrderProductName = set.getString(3);
                String OrderProductQuantity = set.getString(4);
                String r[] = {OrderId, ProductId, OrderProductName, OrderProductQuantity};
                dm.addRow(r);
            }
            jOrderProductsTable.setModel(dm);
            jOrderProductsTable.setRowSelectionAllowed(false);
            DefaultTableModel dmO = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    // all cells false
                    return false;
                }
            };
            dmO.addColumn("Order Id");
            dmO.addColumn("Order Date");
            dmO.addColumn("Order Total Price");
            dmO.addColumn("Customer Name");
            dmO.addColumn("Customer Phone");
            stmt = con.prepareStatement(
                    "select OrderId,OrderDate,OrderTotalPrice,CustomerName,CustomerPhone from ordertable;");
            set = stmt.executeQuery();
            while (set.next()) {
                String r[] = {set.getString(1), set.getString(2), set.getString(3), set.getString(4),
                    set.getString(5)};
                dmO.addRow(r);
            }
            jOrdersTable.setModel(dmO);

        } catch (SQLException ex) {
            System.out.println("Error");
        }
        CustomMethods.makeDark(jOrdersTable, jScrollPane1);
        CustomMethods.makeDark(jOrderProductsTable, jScrollPane2);
    }

    private void jBackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jBackToDashboardButtonActionPerformed
        this.setVisible(false);
        DashboardFrame d = new DashboardFrame();
        d.setVisible(true);
        d.setLocationRelativeTo(this);

    }// GEN-LAST:event_jBackToDashboardButtonActionPerformed

    private void jDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jDeleteOrderActionPerformed
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ComputerStoreManagementSystem",
                    "root", "root");
            PreparedStatement stmt = con.prepareStatement("delete from ordertable where OrderId=?");
            PreparedStatement stmtP = con.prepareStatement("delete from orderproducttable where OrderId=?");
            int rows[] = jOrdersTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                String orderId = jOrdersTable.getValueAt(rows[i], 0).toString();
                stmt.setString(1, orderId);
                stmtP.setString(1, orderId);
                stmt.execute();
                stmtP.execute();
            }
            ShowData();
            JOptionPane.showMessageDialog(this, "Delete Success");
        } catch (Exception e) {
            System.out.println("Error");
        }
    }// GEN-LAST:event_jDeleteOrderActionPerformed

    private void search() {
        String searchBy = JSeachCombo.getSelectedItem().toString();
        String searchText = JSearchText.getText();
        if (searchText.equals("")) {
            ShowData();
            return;
        }
        DefaultTableModel dm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        dm.addColumn("Order Id");
        dm.addColumn("Product ID");
        dm.addColumn("Product Name");
        dm.addColumn("Quantity");
        DefaultTableModel dmO = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // all cells false
                return false;
            }
        };
        dmO.addColumn("Order Id");
        dmO.addColumn("Order Date");
        dmO.addColumn("Order Total Price");
        dmO.addColumn("Customer Name");
        dmO.addColumn("Customer Phone");

        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ComputerStoreManagementSystem",
                    "root", "root");
            if (searchBy == "Product Name") {
                PreparedStatement stmt = con.prepareStatement(
                        "select OrderId, orderproducttable.ProductId, OrderProductQuantity,ProductName from orderproducttable inner join producttable on orderproducttable.ProductID = producttable.ProductID where producttable.ProductName like ?;");
                stmt.setString(1, searchText + "%");
                ResultSet set = stmt.executeQuery();
                while (set.next()) {
                    String OrderId = set.getString(1);
                    String ProductId = set.getString(2);
                    String OrderProductQuantity = set.getString(3);
                    String ProductName = set.getString(4);
                    PreparedStatement stmtO = con.prepareStatement(
                            "select OrderId,OrderDate,OrderTotalPrice,CustomerName,CustomerPhone from ordertable where OrderId = ?; ");
                    stmtO.setString(1, OrderId);
                    ResultSet setO = stmtO.executeQuery();
                    while (setO.next()) {
                        String[] row = {setO.getString(1), setO.getString(2), setO.getString(3), setO.getString(4),
                            setO.getString(5)};
                        dmO.addRow(row);
                    }
                    String[] row = {OrderId, ProductId, ProductName, OrderProductQuantity};
                    dm.addRow(row);
                }
            } else {
                PreparedStatement stmt = con.prepareStatement(
                        "select OrderId, OrderDate, OrderTotalPrice, CustomerName, CustomerPhone from ordertable where "
                        + searchBy.replace(" ", "") + " like ?;");
                PreparedStatement stmtP = con.prepareStatement(
                        "select orderid, orderproducttable.ProductId, ProductName, OrderProductQuantity from orderproducttable inner join producttable on producttable.ProductID = orderproducttable.ProductID where OrderId = ?");
                stmt.setString(1, searchText + "%");
                ResultSet set = stmt.executeQuery();
                while (set.next()) {
                    String OrderId = set.getString(1);
                    String[] row = {OrderId, set.getString(2), set.getString(3), set.getString(4), set.getString(5)};
                    dmO.addRow(row);
                    stmtP.setString(1, OrderId);
                    ResultSet setP = stmtP.executeQuery();
                    while (setP.next()) {
                        String[] rowP = {setP.getString(1), setP.getString(2), setP.getString(3), setP.getString(4)};
                        dm.addRow(rowP);
                    }
                }
            }
            jOrderProductsTable.setModel(dm);
            jOrderProductsTable.setRowSelectionAllowed(false);
            jOrdersTable.setModel(dmO);
        } catch (Exception e) {
            System.out.println("Error");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrdersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrdersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrdersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrdersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrdersFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JSeachCombo;
    private javax.swing.JTextField JSearchText;
    private javax.swing.JButton jBackToDashboardButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jDeleteOrder;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTable jOrderProductsTable;
    private javax.swing.JTable jOrdersTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
